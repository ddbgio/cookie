package cookie

import (
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/stretchr/testify/require"
)

var testCookie = http.Cookie{
	Name:     "example_cookie",
	Value:    "chocolate fudge",
	Path:     "/",
	MaxAge:   86400,
	HttpOnly: true,
	Secure:   true,
	SameSite: http.SameSiteLaxMode,
}

func TestSecret(t *testing.T) {
	secretKey, err := NewCookieSecret()
	require.NoError(t, err)
	require.Len(t, secretKey, secretLength)
	t.Logf("generated secret key (len:%d): %x", len(secretKey), secretKey)
}

// autogenerated
func TestWriteRead(t *testing.T) {
	w := httptest.NewRecorder()
	err := Write(w, testCookie)
	require.NoError(t, err)

	r := httptest.NewRequest(http.MethodGet, "/", nil)
	r.Header.Set("Cookie", w.Result().Header.Get("Set-Cookie"))

	value, err := Read(r, testCookie.Name)
	require.NoError(t, err)
	require.Equal(t, testCookie.Value, value)
	t.Logf("wrote and read cookie: %s=%s\n", testCookie.Name, value)
}

// autogenerated
func TestWriteReadSigned(t *testing.T) {
	secretKey, err := NewCookieSecret()
	require.NoError(t, err)
	t.Logf("signing with key: %x\n", secretKey)

	w := httptest.NewRecorder()
	err = WriteSigned(w, testCookie, secretKey)
	require.NoError(t, err)

	r := httptest.NewRequest(http.MethodGet, "/", nil)
	r.Header.Set("Cookie", w.Result().Header.Get("Set-Cookie"))

	value, err := ReadSigned(r, testCookie.Name, secretKey)
	require.NoError(t, err)
	require.Equal(t, testCookie.Value, value)
	t.Logf("wrote and read signed cookie: %s=%s\n", testCookie.Name, value)
}

// autogenerated
func TestWriteReadEncrypted(t *testing.T) {
	secretKey, err := NewCookieSecret()
	require.NoError(t, err)
	t.Logf("ecrypting with key: %x\n", secretKey)

	w := httptest.NewRecorder()
	err = WriteEncrypted(w, testCookie, secretKey)
	require.NoError(t, err)

	r := httptest.NewRequest(http.MethodGet, "/", nil)
	r.Header.Set("Cookie", w.Result().Header.Get("Set-Cookie"))

	value, err := ReadEncrypted(r, testCookie.Name, secretKey)
	require.NoError(t, err)
	require.Equal(t, testCookie.Value, value)
	t.Logf("wrote and read encrypted cookie: %s=%s\n", testCookie.Name, value)
}
